<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAMAEBAAAAAAAABoBQAANgAAACAgAAAAAAAAqAgAAJ4FAAAwMAAAAAAAAKgOAABGDgAAKAAAABAA
        AAAgAAAAAQAIAAAAAABAAQAAAAAAAAAAAAAAAQAAAAAAAAAAAAAACAgACAgQAAgQEAAACBgAABAYAAgQ
        GAAQEBgAABAhAAgQIQAIGCEAGCEhACEhIQAAECkAABgpABAYKQAAGDEACBgxABAhMQAhKTEACCE5ACkx
        OQAIIUIACClCABgxQgAIKUoAKTlKADlCSgAIMVIAEDFSABg5UgAIMVoAGDlaACE5WgApQloAMUpaAAgx
        YwAIOWMAEDljABhCYwAhQmMAOVJjAEpaYwAIOWsACEJrABBCawAYQmsAKVJrAAhCcwAQQnMAGEJzABhK
        cwAhSnMAKUpzAEJacwBSY3MASmtzABBCewAYSnsAIVJ7AClSewAxWnsAOWN7AEpjewBKa3sAWmt7ABBK
        hAAYUoQAIVKEAClShAAxWoQAOWOEAEJrhAAYUowAIVKMACFajAApWowAMWOMADljjABCY4wAUmuMAFp7
        jABze4wAe4SMACFalAApY5QAMWOUADlrlABKc5QAWnuUACFjnAApY5wAMWOcAClrnAAxa5wAOWucAEJz
        nABKc5wAUnOcAGuEnAB7jJwAMWulADlrpQAxc6UASnulAFqEpQCEnKUAlJylADlzrQBCc60AOXutAEJ7
        rQBKe60Aa4ytAJylrQA5e7UAQnu1AEKEtQBShLUAUoy1AFqMtQCUpbUArbW1ALW1tQBChL0ASoS9AFKM
        vQCEnL0ArbW9ALW1vQC9vb0ASoTGAEKMxgBKjMYAUozGAFqUxgBrlMYAnLXGAMbGxgBKjM4AUozOAFKU
        zgBanM4AY5zOAHOlzgCErc4AlK3OAK29zgBKlNYAUpTWAFqU1gBSnNYAWpzWAGuc1gBrpdYAc6XWAHut
        1gCUtdYApb3WAL3O1gDOztYAWpzeAGOl3gBrpd4Ac63eAIS13gCMtd4AlLXeAJS93gClxt4Atc7eAMbW
        3gDW1t4A1t7eAN7e3gB7recAhLXnAIy15wCMvecAlL3nAJTG5wCcxucApcbnAK3G5wCtzucAvc7nAMbW
        5wDe3ucA5+fnAKXG7wCtzu8Atc7vAL3W7wDG3u8Azt7vAO/v7wDW5/cA3u/3AOfv9wD39/cAAP//AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wAAAAAAARg2Pz82IwIAAAAADw9LLRwX
        FxgSICcSeJqNAA86HB1NdH2HiH9ZaZqWLwBDHCB8lZWOmqWzs6SOLxEAJh18lY1iPCYdf7CajT00AxZW
        lY1XVUscR6akj5WDLyEZg5VoOltLNJKdaC+WlUYvJ5WVPEtzZVVEREQfdZVgLy6VlCFLZV1lbGxlJmyV
        aCgnlZUoRFtlZWxsSxlslW0oHoaVTi1bW2VlQyYdjJVmIRFhmJovJjFERCYZX5WNRQMPHpCxkTYXFxYd
        X5SVaEQADwojnb2/nXF4jpaWaTMPAA8PDxhjibm4tpBpTEQPDwAPDw8PDh0vPUc0M0oPDw8AAAD//wAA
        //8AAP//AAD//wAA//8AAP//AAD//wAA//8AAP//AAD//wAA//8AAP//AAD//wAA//8AAP//AAD//ygA
        AAAgAAAAQAAAAAEACAAAAAAAgAQAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAgIAAgIEAAIEBAAAAgYAAAQ
        GAAIEBgAEBAYAAAQIQAIECEACBghABghIQAhISEAABApAAAYKQAQGCkAABgxAAgYMQAQITEAISkxAAgh
        OQApMTkACCFCAAgpQgAYMUIACClKACk5SgA5QkoACDFSABAxUgAYOVIACDFaABg5WgAhOVoAKUJaADFK
        WgAIMWMACDljABA5YwAYQmMAIUJjADlSYwBKWmMACDlrAAhCawAQQmsAGEJrAClSawAIQnMAEEJzABhC
        cwAYSnMAIUpzAClKcwBCWnMAUmNzAEprcwAQQnsAGEp7ACFSewApUnsAMVp7ADljewBKY3sASmt7AFpr
        ewAQSoQAGFKEACFShAApUoQAMVqEADljhABCa4QAGFKMACFSjAAhWowAKVqMADFjjAA5Y4wAQmOMAFJr
        jABae4wAc3uMAHuEjAAhWpQAKWOUADFjlAA5a5QASnOUAFp7lAAhY5wAKWOcADFjnAApa5wAMWucADlr
        nABCc5wASnOcAFJznABrhJwAe4ycADFrpQA5a6UAMXOlAEp7pQBahKUAhJylAJScpQA5c60AQnOtADl7
        rQBCe60ASnutAGuMrQCcpa0AOXu1AEJ7tQBChLUAUoS1AFKMtQBajLUAlKW1AK21tQC1tbUAQoS9AEqE
        vQBSjL0AhJy9AK21vQC1tb0Avb29AEqExgBCjMYASozGAFKMxgBalMYAa5TGAJy1xgDGxsYASozOAFKM
        zgBSlM4AWpzOAGOczgBzpc4AhK3OAJStzgCtvc4ASpTWAFKU1gBalNYAUpzWAFqc1gBrnNYAa6XWAHOl
        1gB7rdYAlLXWAKW91gC9ztYAzs7WAFqc3gBjpd4Aa6XeAHOt3gCEtd4AjLXeAJS13gCUvd4ApcbeALXO
        3gDG1t4A1tbeANbe3gDe3t4Ae63nAIS15wCMtecAjL3nAJS95wCUxucAnMbnAKXG5wCtxucArc7nAL3O
        5wDG1ucA3t7nAOfn5wClxu8Arc7vALXO7wC91u8Axt7vAM7e7wDv7+8A1uf3AN7v9wDn7/cA9/f3AAD/
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8AAAAAAAAAAAAAAAABChgjKSkp
        Gg8DAAAAAAAAAAAAAAAAAAAAAAAAAAAGImh4aWNQUFljiIhAEwAAAAAAAAAAAAAAAAAAAAABIXZYIhgd
        JicuJx0YGlCRUQsAAAAAAAAAAAAAAAAAEm1HGCA7VVRbVVU6LSYZFAo2kjYAAAAAAAAAAAAAABJtHhk6
        VFVbW1VUMRcXICgvIhITfzYAAAAAAAAAAAASXxgnRFRbW1tbVTEXO3yVmJyxkT8SWTYBAAAAAAAAEm0X
        JkRKVF5bVFVEGV+VjWhORk9/pVgPaS8AAAAAAAFsHg4XHCY6VF1lZS00lY1GSlVDQx12jR4YcBIAAAAA
        IT0UPH52Rx4mS2ZlJmyVX0xlWx8XFFaVRSYaXwEAAAJtEi4miKWkhjwgVVUmfZo9ZWVLIIh+hpVVOhdX
        GAAAHlcdS0M7RTxwjV8mOh2HpTxbW1szcXZwcEZLOyFXAABWHjpbXVtbVTFOjG8dFoizLzFLW1VVS0tL
        SlVEGG0KA20XQ1RbW2VlWzpHlXAXabNZGB47ZUs5OlVbW0sgTR4PXxdMW2VbZWVnZUROm389pqOYcCYu
        GSAvMltVVC4oNRhNHktbZVtUVEM6Mhw+pn94mJVoLyFGhYw8W2VbOh48GkYgVVtbWzEcGR4eGBRHpaKD
        h5WUlZWHV0NlZVQ7HkYaRiBUVEkdHWaVlaOypoialnUdKFhiT0RbZWVbXEQeRhhNHVRVMR18lY92aHGo
        r5hijG8gRGVsZVtlZVtURB48D18USzoXbJWGRUMZPKaalXBXlW8nRFtnZVtbW1U0ITUDbRdELSCVjTxb
        RDWppk6HlTU+jW8gOlRUW2VbVB1NHgBWHjsmRpVvOmxcTEZGJl+VViZOjXYgHB0zSltMGG0KACFXHRxW
        lVcxbGVlZWxDTJVfRDpGh4dXTTUuVDohXwAAA3APHU2VVzpbZWVzXiZMlV9VW0s0aJyajS8zGVYYAAAA
        KUYUKJWGIEtbXV0xGXyVX1VlZVs6PFBjPiYYXwEAAAACiCIUh6NpHSYyJhlMlY07W2xlXV1bS0QzEmwS
        AAAAAAAbnhUinbV/NhgoYI2WV1VlW2VbW1tVOxdNNQEAAAAAAAA3kxUpkcC/tZyahk5LW2VaVVtUVDsX
        RjUBAAAAAAAAAAAboCoSNmRxcUYzVVtbVVtbVUQnElcvAAAAAAAAAAAAAAAbrWoSGS46S1RbVVtLSkQu
        FCF0KAAAAAAAAAAAAAAAAAAMU6tqKRgXICAnICAXHjZpTw8AAAAAAAAAAAAAAAAAAAAAE1Ogq3pqY1Fk
        a4mJYxUBAAAAAAAAAAAAAAAAAAAAAAAAAAIVKlNTU1NBFQsAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKAAAADAA
        AABgAAAAAQAIAAAAAACACgAAAAAAAAAAAAAAAQAAAAAAAAAAAAAACAgACAgQAAgQEAAACBgAABAYAAgQ
        GAAQEBgAABAhAAgQIQAIGCEAGCEhACEhIQAAECkAABgpABAYKQAAGDEACBgxABAhMQAhKTEACCE5ACkx
        OQAIIUIACClCABgxQgAIKUoAKTlKADlCSgAIMVIAEDFSABg5UgAIMVoAGDlaACE5WgApQloAMUpaAAgx
        YwAIOWMAEDljABhCYwAhQmMAOVJjAEpaYwAIOWsACEJrABBCawAYQmsAKVJrAAhCcwAQQnMAGEJzABhK
        cwAhSnMAKUpzAEJacwBSY3MASmtzABBCewAYSnsAIVJ7AClSewAxWnsAOWN7AEpjewBKa3sAWmt7ABBK
        hAAYUoQAIVKEAClShAAxWoQAOWOEAEJrhAAYUowAIVKMACFajAApWowAMWOMADljjABCY4wAUmuMAFp7
        jABze4wAe4SMACFalAApY5QAMWOUADlrlABKc5QAWnuUACFjnAApY5wAMWOcAClrnAAxa5wAOWucAEJz
        nABKc5wAUnOcAGuEnAB7jJwAMWulADlrpQAxc6UASnulAFqEpQCEnKUAlJylADlzrQBCc60AOXutAEJ7
        rQBKe60Aa4ytAJylrQA5e7UAQnu1AEKEtQBShLUAUoy1AFqMtQCUpbUArbW1ALW1tQBChL0ASoS9AFKM
        vQCEnL0ArbW9ALW1vQC9vb0ASoTGAEKMxgBKjMYAUozGAFqUxgBrlMYAnLXGAMbGxgBKjM4AUozOAFKU
        zgBanM4AY5zOAHOlzgCErc4AlK3OAK29zgBKlNYAUpTWAFqU1gBSnNYAWpzWAGuc1gBrpdYAc6XWAHut
        1gCUtdYApb3WAL3O1gDOztYAWpzeAGOl3gBrpd4Ac63eAIS13gCMtd4AlLXeAJS93gClxt4Atc7eAMbW
        3gDW1t4A1t7eAN7e3gB7recAhLXnAIy15wCMvecAlL3nAJTG5wCcxucApcbnAK3G5wCtzucAvc7nAMbW
        5wDe3ucA5+fnAKXG7wCtzu8Atc7vAL3W7wDG3u8Azt7vAO/v7wDW5/cA3u/3AOfv9wD39/cAAP//AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wAAAAAAAAAAAAAAAAAAAAAAAAIAAAcS
        ExMTExMJAgABAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABChhHaYiQkZGcnJGQcVkpEwcA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQ89cIeIaVBANykjKUBQUJCRkGkjBgAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAGPX6HYSMYDxYdIB0gIB0ZERMaUX+diBsBAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        Aih0cC8YFB0uM0RESktLRDo7Mi4gFBgicZ1xGgAAAAAAAAAAAAAAAAAAAAAAAAAKZn09ChgyOktbXlRb
        W1RUVDEmHxwUFBEKBSN/qD8BAAAAAAAAAAAAAAAAAAAAAApvbxgSHTtLW1VUZVRbVFRCJhkWFBcYGBgX
        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
        //8AAAAAAAD//wAAAAAAAP//AAAAAAAA//8=
</value>
  </data>
</root>